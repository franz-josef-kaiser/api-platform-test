# Configuration File - Nginx Server Configs
# https://nginx.org/en/docs/


user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Configures default error logger.
error_log /dev/stderr warn;

events {
	# The maximum number of simultaneous connections that can be opened by
	# a worker process.
	worker_connections 1024;
}

http {
	# Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	#resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;

	# Don't tell nginx version to the clients. Default is 'on'.
	server_tokens off;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length. If the stated content
	# length is greater than this size, then the client receives the HTTP
	# error code 413. Set to 0 to disable. Default is '1m'.
	client_max_body_size 1m;

	# Sendfile copies data between one FD and other from within the kernel,
	# which is more efficient than read() + write(). Default is off.
	sendfile on;

	# Causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames. Default is 'off'.
	tcp_nopush on;

  # Note: it's expected to run a TLS-offloading proxy infront of this nginx instance.
  # Therefore all transport layer encryption related directives (`ssl_*`) are omitted.

	# Enable gzipping of responses on HTTP proxy infront of this nginx instance!
	gzip off;


	# Helper variable for proxying websockets.
	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}


	# Specifies the main log format.
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

	# Sets the path, format, and configuration for a buffered log write.
	access_log /dev/stdout main;

	server {
		listen 80 default_server;
		listen [::]:80 default_server;

    root /srv/api/public;
    index index.php;

		location / {
			# First attempt to serve request as file, then
			# as directory, then fall back to displaying a 404.
			try_files $uri $uri/ =404;
		}

		# pass PHP scripts to FastCGI server
		#
		location ~ \index.php$ {

			# regex to split $uri to $fastcgi_script_name and $fastcgi_path
			fastcgi_split_path_info ^(.+?\.php)(/.*)$;

			# Check that the PHP script exists before passing it
			try_files $fastcgi_script_name =404;

			# Bypass the fact that try_files resets $fastcgi_path_info
			# see: http://trac.nginx.org/nginx/ticket/321
			set $path_info $fastcgi_path_info;
			fastcgi_param PATH_INFO $path_info;

			fastcgi_index index.php;

			# Maybe not production safe:
			fastcgi_intercept_errors on;

			include fastcgi.conf;
      fastcgi_pass unix:/php-socket/php-www.sock;
		}

		# You may need this to prevent return 404 recursion.
		location = /404.html {
			internal;
		}


	  # PHP FPM server stats and health status
    location ~ ^/(status|ping/?)$ {
      access_log off;
			include fastcgi.conf;
      fastcgi_pass unix:/php-socket/php-www.sock;
    }

	  # Nginx server stats
    location = /stub_status {
      stub_status;
      access_log off;
    }

	}
}
